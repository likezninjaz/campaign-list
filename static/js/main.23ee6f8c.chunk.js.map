{"version":3,"sources":["components/Input/index.tsx","components/Datepicker/index.tsx","components/Table/styled.ts","components/Table/index.tsx","utils/formatters/index.ts","containers/Main/styled.ts","store/constants/helpers/index.ts","store/actions/helpers/index.ts","store/selectors/main.ts","store/constants/main.ts","store/actions/main.ts","containers/Main/index.tsx","serviceWorker.js","store/reducers/main.ts","store/reducers/index.ts","services/network.ts","store/sagas/helpers/index.ts","store/sagas/main.ts","store/sagas/index.ts","store/index.ts","index.tsx","routes/index.tsx"],"names":["Input","_ref","label","onChange","placeholder","_useState","useState","_useState2","Object","slicedToArray","labelWidth","setLabelWidth","_React$useState","React","_React$useState2","value","setValue","labelRef","useRef","useEffect","current","offsetWidth","react_default","a","createElement","FormControl","variant","InputLabel","ref","htmlFor","OutlinedInput","id","event","target","defaultProps","Datepicker","minDate","maxDate","selectedDate","setSelectedDate","MuiPickersUtilsProvider","utils","DateFnsUtils","DatePicker","disableToolbar","format","date","Indicator","styled","div","_templateObject","active","css","_templateObject2","Table","data","isDataLoading","isDataLoadingFailure","nameFilter","minDateFilter","maxDateFilter","filteredData","filter","item","name","toLowerCase","includes","moment","startDate","endDate","Paper","Table_Table","TableHead","TableRow","TableCell","TableBody","length","map","key","component","scope","absValue","Math","abs","absShortValue","sign","toFixed","thousondsToK","budget","LinearProgress","action","constant","Container","styled_templateObject","Header","styled_templateObject2","Dates","_templateObject3","DateContainer","_templateObject4","TableContainer","_templateObject5","getMainDataSelector","state","main","mainData","getIsDataLoading","getIsDataLoadingFailure","act","type","payload","mainConstants","GET_MAIN_DATA","reduce","acc","concat","getMainData","request","req","REQUEST","success","res","SUCCESS","failure","FAILURE","Main","dispatch","useDispatch","useSelector","setMaxDate","_useState3","_useState4","setMinDate","_useState5","_useState6","searchValue","setSearchValue","Datepicker_Datepicker","Input_Input","components_Table_Table","Boolean","window","location","hostname","match","inititalState","rootReducer","combineReducers","arguments","undefined","_objectSpread","network","axios","create","baseURL","fetchDataWorker","fetchEntity","regenerator_default","wrap","_context","prev","next","call","sent","put","t0","stop","_marked","getMainDataWatcher","take","get","main_marked","rootSaga","all","fork","sagas_marked","sagaMiddleware","createSagaMiddleware","middlewares","createLogger","collapsed","store","createStore","applyMiddleware","apply","toConsumableArray","run","ReactDOM","render","es","react_router_dom","basename","process","react_router","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23ee6f8c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\ninterface IProps {\n  label?: string\n  onChange: (value: string) => void,\n  placeholder?: string,\n}\n\nexport const Input = ({\n  label,\n  onChange,\n  placeholder,\n}:IProps): JSX.Element => {\n\n  const [labelWidth, setLabelWidth] = useState(0);\n  const [value, setValue] = React.useState('');\n  const labelRef = useRef<HTMLLabelElement>(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setValue(value);\n    onChange(value);\n  }\n\n  useEffect(() => {\n    setLabelWidth(labelRef.current!.offsetWidth);\n  }, []);\n\n  return (\n    <FormControl variant=\"outlined\">\n      <InputLabel ref={labelRef} htmlFor=\"component-outlined\">\n        {label}\n      </InputLabel>\n      <OutlinedInput\n        id=\"component-outlined\"\n        placeholder={placeholder}\n        value={value}\n        onChange={handleChange}\n        labelWidth={labelWidth}\n      />\n    </FormControl>\n  )\n}\n\nInput.defaultProps = {\n  label: '',\n  placeholder: ''\n}","import React from 'react';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\ninterface IProps {\n  label?: string\n  value: Date\n  minDate?: Date | null\n  maxDate?: Date | null\n  onChange: (date: Date) => void\n}\n\nexport const Datepicker = ({\n  label,\n  value,\n  minDate,\n  maxDate,\n  onChange,\n}:IProps): JSX.Element => {\n\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(null);\n\n  function handleDateChange(date: any) {\n    setSelectedDate(date);\n    onChange(date);\n  }\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"MM/dd/yyyy\"\n        label={label}\n        value={selectedDate}\n        minDate={minDate}\n        maxDate={maxDate}\n        onChange={handleDateChange}\n      />\n    </MuiPickersUtilsProvider>\n  )\n}\n\nDatepicker.defaultProps = {\n  label: '',\n  placeholder: ''\n}","import styled, { css } from 'styled-components';\n\ninterface IIndicator {\n  active: boolean\n}\n\nexport const Indicator: any = styled.div`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin-right: 10px;\n  border-radius: 50%;\n  background-color: green;\n\n  ${({ active }: IIndicator) => !active && css`\n    background-color: red;\n  `}\n`;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { default as MaterialTable } from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport moment from 'moment';\n\nimport { IData } from '../../containers/Main';\nimport { Indicator } from './styled';\nimport { thousondsToK } from '../../utils/formatters';\n\ninterface IProps {\n  data: IData[]\n  nameFilter: string\n  minDateFilter: Date\n  maxDateFilter: Date\n  isDataLoading: boolean\n  isDataLoadingFailure: boolean\n}\n\nexport const Table = ({\n  data,\n  isDataLoading,\n  isDataLoadingFailure,\n  nameFilter,\n  minDateFilter,\n  maxDateFilter,\n}:IProps): JSX.Element => {\n\n  const filteredData = data.filter((item: IData) =>\n    item.name.toLowerCase().includes(nameFilter.toLowerCase())\n    &&\n    minDateFilter \n      ? moment(item.startDate, \"MM/dd/yyyy\") > moment(minDateFilter) \n      : true\n    &&\n    maxDateFilter \n      ? moment(item.endDate, \"MM/dd/yyyy\") < moment(maxDateFilter) \n      : true\n    &&\n    moment(item.startDate, \"MM/dd/yyyy\") < moment(item.endDate, \"MM/dd/yyyy\")\n  );\n\n  return (\n    <Paper>\n      <MaterialTable>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Start Date</TableCell>\n            <TableCell>End Date</TableCell>\n            <TableCell>Active</TableCell>\n            <TableCell>Budget</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredData.length \n            ? filteredData.map((item: IData) => {\n\n                const active = \n                  moment() > moment(item.startDate, \"MM/dd/yyyy\") &&\n                  moment() < moment(item.endDate, \"MM/dd/yyyy\")\n              \n                return (\n                  <TableRow key={item.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {item.name}\n                    </TableCell>\n                    <TableCell>\n                      {item.startDate}\n                    </TableCell>\n                    <TableCell>\n                      {item.endDate}\n                    </TableCell>\n                    <TableCell>\n                      <Indicator active={active}/>\n                      {active ? 'Active' : 'Inactive'}\n                    </TableCell>\n                    <TableCell>\n                      {thousondsToK(item.budget) + ' USD'}\n                    </TableCell>\n                  </TableRow>\n                )\n              }\n            ) \n            : !isDataLoading && \n              <TableRow>\n                <TableCell>\n                  No data found\n                </TableCell>\n              </TableRow>\n          }\n          {isDataLoadingFailure &&\n            <TableRow>\n              <TableCell>\n                Data loading error\n              </TableCell>\n            </TableRow>\n          }\n        </TableBody>\n      </MaterialTable>\n      {isDataLoading &&\n        <LinearProgress />\n      }\n    </Paper>\n  )\n}\n\nTable.defaultProps = {\n  data: [],\n  isDataLoading: false,\n  isDataLoadingFailure: false,\n  nameFilter: ''\n}","export const thousondsToK = (value: number) => {\n  \n  const absValue: number = Math.abs(value);\n  const absShortValue: any = absValue/1000;\n\n  return(absValue > 999 \n    ? Math.sign(value) * absShortValue.toFixed(1) + 'k' \n    : Math.sign(value) * absValue\n  )\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 5%;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Dates = styled.div`\n  display: flex;  \n`;\n\nexport const DateContainer = styled.div`\n  &:first-child {\n    margin-right: 20px;\n  }\n`;\n\nexport const TableContainer = styled.div`\n  margin-top: 20px;\n`;\n","export type IRequestGenerator = {\n  REQUEST: 'REQUEST',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n}\n\nconst REQUEST = 'REQUEST';\nconst SUCCESS = 'SUCCESS'\nconst FAILURE = 'FAILURE';\n\nexport const generateRequestTypes = (action: any) =>\n  [REQUEST, SUCCESS, FAILURE].reduce(\n    (acc: any, type) => {\n      acc[type] = `${action}_${type}`;\n\n      return acc;\n    },\n    {}\n  );\n","const act = (type: string, payload?: any) => ({\n  type,\n  payload\n});\n\nexport const getFetchActions = (constant: any) => ({\n  request: (req?: any) => act(constant.REQUEST, req),\n  success: (res: any) => act(constant.SUCCESS, res),\n  failure: (res?: any) => act(constant.FAILURE, res)\n});\n","export const getMainDataSelector = (state: any) => state.main.mainData;\nexport const getIsDataLoading = (state: any) => state.main.isDataLoading;\nexport const getIsDataLoadingFailure = (state: any) => state.main.isDataLoadingFailure;","import { generateRequestTypes, IRequestGenerator } from \"./helpers\";\n\ninterface IMainConstants {\n  GET_MAIN_DATA: IRequestGenerator,\n}\n\nexport const mainConstants: IMainConstants = {\n  GET_MAIN_DATA: generateRequestTypes('GET_MAIN_DATA')\n};\n","import { getFetchActions } from \"./helpers\";\n\nimport {\n  mainConstants\n} from '../constants';\n\nexport const getMainData = getFetchActions(mainConstants.GET_MAIN_DATA);","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Input } from '../../components/Input';\nimport { Datepicker } from '../../components/Datepicker';\nimport { Table } from '../../components/Table';\nimport {\n  Container,\n  Header,\n  Dates,\n  DateContainer,\n  TableContainer,\n} from './styled';\n\nimport { \n  getMainDataSelector,\n  getIsDataLoading,\n  getIsDataLoadingFailure\n} from '../../store/selectors/main';\nimport { getMainData } from '../../store/actions/main';\n\nexport interface IData {\n  id: number,\n  name: string,\n  startDate: string,\n  endDate: string,\n  budget: number,\n  active: boolean\n}\n\nexport const Main = () => {\n\n  const dispatch = useDispatch()\n  const mainData: IData[] = useSelector(getMainDataSelector);\n  const isDataLoading: boolean = useSelector(getIsDataLoading);\n  const isDataLoadingFailure: boolean = useSelector(getIsDataLoadingFailure);\n  const [maxDate, setMaxDate] = useState();\n  const [minDate, setMinDate] = useState();\n  const [searchValue, setSearchValue] = useState('');\n  \n  useEffect(() => {\n    dispatch(getMainData.request());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Container>\n      <Header>\n        <Dates>\n          <DateContainer>\n            <Datepicker\n              label='Start date'\n              onChange={(date: Date) => setMinDate(date)}\n              value={minDate}\n              maxDate={maxDate}\n            />\n            </DateContainer>\n          <DateContainer>\n            <Datepicker\n              label='End date'\n              value={maxDate}\n              minDate={minDate}\n              onChange={(date: Date) => setMaxDate(date)}\n            />\n          </DateContainer>\n        </Dates>\n        <Input\n          label='Search by name'\n          onChange={(value: string) => setSearchValue(value)}\n        />\n      </Header>\n      <TableContainer>\n        <Table\n          data={mainData}\n          nameFilter={searchValue}\n          minDateFilter={minDate}\n          maxDateFilter={maxDate}\n          isDataLoading={isDataLoading}\n          isDataLoadingFailure={isDataLoadingFailure}\n        />\n      </TableContainer>\n    </Container>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from \"redux\";\n\nimport { mainConstants } from '../constants';\nimport { IData } from '../../containers/Main'\n\ninterface IMainReducer {\n  mainData: IData[],\n  isDataLoading: boolean,\n  isDataLoadingFailure: boolean\n} \n\nconst inititalState = {\n  mainData: [],\n  isDataLoading: false,\n  isDataLoadingFailure: false\n};\n\nexport const main: Reducer<IMainReducer, any> = (state = inititalState, action) => {\n\n  switch (action.type) {\n\n    case mainConstants.GET_MAIN_DATA.REQUEST:\n      return {\n        ...state,\n        isDataLoading: true\n      };\n    \n    case mainConstants.GET_MAIN_DATA.SUCCESS:\n      return {\n        ...state,\n        mainData: action.payload.data,\n        isDataLoading: false\n      };\n\n    case mainConstants.GET_MAIN_DATA.FAILURE:\n      return {\n        ...state,\n        isDataLoading: false,\n        isDataLoadingFailure: true\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { main } from './main';\n\nexport const rootReducer = combineReducers({\n  main\n});","import axios from 'axios';\n\nexport const network = axios.create({\n  baseURL: ''\n});\n","import { call, put } from 'redux-saga/effects';\n\nexport function* fetchDataWorker(\n  fetchEntity: any,\n  req: any,\n  {\n    success,\n    failure\n  }: any,\n) {\n\n  try {\n    const data = yield (call as any)(fetchEntity, req);\n    yield put(success(data));\n  }\n  catch (error) {\n    yield put(failure());\n  }\n}\n","import { call, take } from 'redux-saga/effects';\n\nimport { network } from '../../services/network';\nimport { fetchDataWorker } from \"./helpers\";\nimport { getMainData } from '../actions/main';\nimport { mainConstants } from '../constants';\n\nexport function* getMainDataWatcher() {\n\n  while(true) {\n    yield take(mainConstants.GET_MAIN_DATA.REQUEST);\n    yield (call as any)(\n      fetchDataWorker,\n      network.get,\n      `http://www.mocky.io/v2/5d5cfa10330000770057b5c5`,\n      getMainData\n    )\n  }\n}\n","import { all, fork } from \"redux-saga/effects\";\n\nimport { getMainDataWatcher } from \"./main\";\n\nexport function* rootSaga() {\n  yield all([\n    fork(getMainDataWatcher),\n  ]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from \"redux-logger\";\n\nimport { rootReducer } from './reducers';\nimport { rootSaga } from \"./sagas\";\n\nconst dev = process.env.NODE_ENV !== 'production';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst logger = createLogger({\n  collapsed: true\n});\nlet middlewares: any[] = [ sagaMiddleware ];\n\nif (dev) {\n  middlewares = [...middlewares, logger];\n}\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(...middlewares)\n);\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\n\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport { Main } from '../containers/Main';\n\nexport default () =>\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path='/' component={Main}/>\n    </Switch>\n  </BrowserRouter>\n"],"sourceRoot":""}